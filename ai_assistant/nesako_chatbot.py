import os
import re
import requests
import json
from typing import List, Optional
from .models import MemoryEntry, Conversation, LearningData

SERPAPI_API_KEY = os.getenv('SERPAPI_API_KEY', '')
DEEPSEEK_API_URL = os.getenv('DEEPSEEK_API_URL', 'https://api.deepseek.com/v1/chat/completions')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', '')

class NESAKOMemoryORM:
    """ORM-backed persistent memory using Django models."""

    def store_memory(self, key: str, value: str) -> None:
        entry, _ = MemoryEntry.objects.update_or_create(
            key=key,
            defaults={
                'value': value,
            }
        )

    def retrieve_memory(self, key: str) -> Optional[str]:
        try:
            return MemoryEntry.objects.get(key=key).value
        except MemoryEntry.DoesNotExist:
            return None

    def store_conversation(self, user_input: str, assistant_response: str) -> None:
        Conversation.objects.create(user_input=user_input, assistant_response=assistant_response)

    def learn_pattern(self, pattern: str, response: str) -> None:
        obj, created = LearningData.objects.get_or_create(pattern=pattern, defaults={'response': response, 'usage_count': 1})
        if not created:
            obj.response = response
            obj.usage_count = obj.usage_count + 1
            obj.save(update_fields=['response', 'usage_count'])

    def get_learned_response(self, user_input: str) -> Optional[str]:
        for ld in LearningData.objects.all():
            if re.search(ld.pattern, user_input, re.IGNORECASE):
                ld.usage_count = ld.usage_count + 1
                ld.save(update_fields=['usage_count'])
                return ld.response
        return None

class NESAKOSearch:
    def __init__(self, api_key: str = SERPAPI_API_KEY):
        self.api_key = api_key or ''

    def search_web(self, query: str) -> List[str]:
        if not self.api_key:
            return []
        try:
            params = {
                'q': query,
                'api_key': self.api_key,
                'engine': 'google'
            }
            r = requests.get('https://serpapi.com/search', params=params, timeout=12)
            data = r.json() if r.ok else {}
            if 'organic_results' in data:
                return [item.get('snippet', '') for item in data.get('organic_results', [])[:3] if item.get('snippet')]
            return []
        except Exception:
            return []

class NESAKOChatbot:
    def __init__(self):
        self.memory = NESAKOMemoryORM()
        self.search = NESAKOSearch()
        # Sistem poruka sa strogim pravilima (naglasak na sportskim pitanjima)
        self.system_prompt = (
            "TI SI NESAKO - PREVI≈†E JE VA≈ΩNO DA NE LA≈ΩE≈†!\n\n"
            "PRAVILA:\n"
            "1. ZA SVA SPORTSKA PITANJA MORA≈† KORISTITI WEB PRETRAGU\n"
            "2. NIKAD NE IZMI≈†LJAJ REZULTATE, DATUME ILI UTAKMICE\n"
            "3. AKO WEB PRETRAGA NE USPE, RECI 'Trenutno nemam a≈æurne informacije'\n"
            "4. NIKAD NE KORISTI PODATKE IZ MODELA ZA SPORTSKA PITANJA\n"
        )

        # Kljuƒçne reƒçi za detekciju sportskih tema
        self.sports_keywords = [
            'utakmice', 'liga', 'rezultat', 'meƒç', 'mecevi', 'champions league',
            'lige sampiona', 'fudbal', 'nogomet', 'premier league', 'nba', 'nfl',
            'nhl', 'mlb', 'timovi', 'stadion', 'gol', 'asistencija', '≈°ut'
        ]

    def learn_from_conversation(self, user_input: str, assistant_response: str) -> None:
        key_phrases = ["zapamti", "nikad", "uvek", "nemoj", "kako da", "≈°ta je", "koji je", "gde je"]
        content = user_input.lower()
        if any(p in content for p in key_phrases):
            pattern = self.create_pattern_from_input(content)
            self.memory.learn_pattern(pattern, assistant_response)

    def create_pattern_from_input(self, user_input: str) -> str:
        words = user_input.lower().split()
        keywords = [w for w in words if len(w) > 3 and w not in ['zapamti', 'nikad', 'uvek', 'nemoj']]
        if keywords:
            pattern = ".*".join(keywords[:3])
            return f".*{pattern}.*"
        return user_input.lower()

    def search_web(self, query: str) -> List[str]:
        return self.search.search_web(query)

    # --- Novo: formatiranje i glavna logika odgovora ---
    def format_search_results(self, results: List[str]) -> str:
        if not results:
            return "Nisam prona≈°ao relevantne rezultate pretrage."
        
        response = "Rezultati web pretrage:\n\n"
        for i, result in enumerate(results, 1):
            # Limit each result to prevent overly long responses
            if len(result) > 200:
                result = result[:197] + "..."
            response += f"{i}. {result}\n"
        response += "\nIzvor: Google Search API\n\n‚ö†Ô∏è *Ove informacije mogu biti nea≈æurne ili netaƒçne*"
        return response

    def get_response(self, user_input: str) -> str:
        # Sportska pitanja obavezno idu kroz web pretragu
        if any(keyword in user_input.lower() for keyword in self.sports_keywords):
            results = self.search_web(user_input)
            if results:
                # Add disclaimer to make it clear this is from web search
                formatted = self.format_search_results(results)
                return f"üîç **Informacije sa weba (mo≈æda nisu a≈æurne):**\n\n{formatted}\n\n‚ö†Ô∏è *Molim proverite na zvaniƒçnim izvorima za najtaƒçnije informacije*"
            return "Trenutno nemam pristup a≈æurnim informacijama. Molim vas proverite na zvaniƒçnim sportskim sajtovima."

        # Nauƒçeni odgovori (pattern-based)
        learned = self.memory.get_learned_response(user_input)
        if learned:
            # Add disclaimer for learned responses
            return f"{learned}\n\n‚ÑπÔ∏è *Ovo je nauƒçeni odgovor baziran na prethodnim interakcijama*"

        # Direktna memorija po kljuƒçu (ako korisnik ka≈æe "zapamti ...")
        direct_mem = self.memory.retrieve_memory(user_input)
        if direct_mem:
            # Add disclaimer for memory-based responses
            return f"{direct_mem}\n\n‚ÑπÔ∏è *Ovo je zapamƒáena informacija iz prethodnih razgovora*"

        # Generalni odgovor preko DeepSeek (ako je konfigurisan) ili fallback
        response = self.generate_response(user_input)
        
        # Add accuracy disclaimer to AI responses
        if "nisam siguran" not in response.lower() and "nemam" not in response.lower():
            response += "\n\n‚ÑπÔ∏è *Ovo je AI generisan odgovor - molim proverite informacije ako su kritiƒçne*"
        
        return response

    def generate_response(self, user_input: str) -> str:
        # Blokiraj sportska pitanja bez pretrage
        if any(keyword in user_input.lower() for keyword in self.sports_keywords):
            return "Za sportske informacije moram koristiti web pretragu. Poku≈°ajte ponovo."

        payload = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": user_input}
            ],
            "temperature": 0.1,
            "max_tokens": 300,
            "top_p": 0.3
        }

        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        } if DEEPSEEK_API_KEY else None

        try:
            if headers:
                r = requests.post(DEEPSEEK_API_URL, headers=headers, json=payload, timeout=30)
                if r.ok:
                    data = r.json()
                    content = (
                        data.get('choices', [{}])[0]
                        .get('message', {})
                        .get('content', '')
                    )
                    if content:
                        # uƒçenje iz konverzacije
                        try:
                            self.learn_from_conversation(user_input, content)
                            self.memory.store_conversation(user_input, content)
                        except Exception:
                            pass
                        return content
                # ako API ne odgovori korektno
                return "Trenutno ne mogu da dohvatim odgovor od AI servisa. Poku≈°ajte ponovo."
            else:
                # Fallback bez API kljuƒça
                simulated = "Ovo je simulirani odgovor. Implementirajte stvarni API poziv ili postavite DEEPSEEK_API_KEY."
                try:
                    self.learn_from_conversation(user_input, simulated)
                    self.memory.store_conversation(user_input, simulated)
                except Exception:
                    pass
                return simulated
        except Exception as e:
            return f"Do≈°lo je do gre≈°ke: {str(e)}"

    def remember_instruction(self, instruction: str) -> str:
        key = f"instruction_{hash(instruction)}"
        try:
            self.memory.store_memory(key, instruction)
            return "Zapamtio sam va≈°e uputstvo."
        except Exception:
            return "Nisam uspeo da zapamtim uputstvo."
