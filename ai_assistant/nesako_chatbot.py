import os
import re
import requests
import json
from typing import List, Optional
from .models import MemoryEntry, Conversation, LearningData

SERPAPI_API_KEY = os.getenv('SERPAPI_API_KEY', '')
DEEPSEEK_API_URL = os.getenv('DEEPSEEK_API_URL', 'https://api.deepseek.com/v1/chat/completions')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', '')

class NESAKOMemoryORM:
    """ORM-backed persistent memory using Django models."""

    def store_memory(self, key: str, value: str) -> None:
        entry, _ = MemoryEntry.objects.update_or_create(
            key=key,
            defaults={
                'value': value,
            }
        )

    def retrieve_memory(self, key: str) -> Optional[str]:
        try:
            return MemoryEntry.objects.get(key=key).value
        except MemoryEntry.DoesNotExist:
            return None

    def store_conversation(self, user_input: str, assistant_response: str) -> None:
        Conversation.objects.create(user_input=user_input, assistant_response=assistant_response)

    def learn_pattern(self, pattern: str, response: str) -> None:
        obj, created = LearningData.objects.get_or_create(pattern=pattern, defaults={'response': response, 'usage_count': 1})
        if not created:
            obj.response = response
            obj.usage_count = obj.usage_count + 1
            obj.save(update_fields=['response', 'usage_count'])

    def get_learned_response(self, user_input: str) -> Optional[str]:
        for ld in LearningData.objects.all():
            if re.search(ld.pattern, user_input, re.IGNORECASE):
                ld.usage_count = ld.usage_count + 1
                ld.save(update_fields=['usage_count'])
                return ld.response
        return None

class NESAKOSearch:
    def __init__(self, api_key: str = SERPAPI_API_KEY):
        self.api_key = api_key or ''

    def search_web(self, query: str) -> List[str]:
        if not self.api_key:
            return []
        try:
            params = {
                'q': query,
                'api_key': self.api_key,
                'engine': 'google'
            }
            r = requests.get('https://serpapi.com/search', params=params, timeout=12)
            data = r.json() if r.ok else {}
            if 'organic_results' in data:
                return [item.get('snippet', '') for item in data.get('organic_results', [])[:3] if item.get('snippet')]
            return []
        except Exception:
            return []

class NESAKOChatbot:
    def __init__(self):
        self.memory = NESAKOMemoryORM()
        self.search = NESAKOSearch()
        # Sistem poruka sa strogim pravilima (naglasak na sportskim pitanjima)
        self.system_prompt = (
            "TI SI NESAKO - PREVI≈†E JE VA≈ΩNO DA NE LA≈ΩE≈†!\n\n"
            "PRAVILA:\n"
            "1. ZA SVA SPORTSKA PITANJA MORA≈† KORISTITI WEB PRETRAGU\n"
            "2. NIKAD NE IZMI≈†LJAJ REZULTATE, DATUME ILI UTAKMICE\n"
            "3. AKO WEB PRETRAGA NE USPE, RECI 'Trenutno nemam a≈æurne informacije'\n"
            "4. NIKAD NE KORISTI PODATKE IZ MODELA ZA SPORTSKA PITANJA\n"
        )

        # Kljuƒçne reƒçi za detekciju sportskih tema
        self.sports_keywords = [
            'utakmice', 'liga', 'rezultat', 'meƒç', 'mecevi', 'champions league',
            'lige sampiona', 'fudbal', 'nogomet', 'premier league', 'nba', 'nfl',
            'nhl', 'mlb', 'timovi', 'stadion', 'gol', 'asistencija', '≈°ut'
        ]

    def learn_from_conversation(self, user_input: str, assistant_response: str) -> None:
        key_phrases = ["zapamti", "nikad", "uvek", "nemoj", "kako da", "≈°ta je", "koji je", "gde je"]
        content = user_input.lower()
        if any(p in content for p in key_phrases):
            pattern = self.create_pattern_from_input(content)
            self.memory.learn_pattern(pattern, assistant_response)
            
        # Also save to persistent memory if available
        try:
            from .memory_manager import PersistentMemoryManager
            memory = PersistentMemoryManager()
            session_id = "default_session"  # This should be passed from the view
            memory.save_learning_data(session_id, 'conversation_pattern', {
                'user_input': user_input,
                'assistant_response': assistant_response
            }, 0.7)
        except Exception:
            pass  # Silently fail if persistent memory is not available

    def create_pattern_from_input(self, user_input: str) -> str:
        words = user_input.lower().split()
        keywords = [w for w in words if len(w) > 3 and w not in ['zapamti', 'nikad', 'uvek', 'nemoj']]
        if keywords:
            pattern = ".*".join(keywords[:3])
            return f".*{pattern}.*"
        return user_input.lower()

    def search_web(self, query: str) -> List[str]:
        return self.search.search_web(query)

    # --- Novo: formatiranje i glavna logika odgovora ---
    def format_search_results(self, results: List[str]) -> str:
        if not results:
            return "Nisam prona≈°ao relevantne rezultate pretrage."
        
        response = "Rezultati web pretrage:\n\n"
        for i, result in enumerate(results, 1):
            # Limit each result to prevent overly long responses
            if len(result) > 200:
                result = result[:197] + "..."
            response += f"{i}. {result}\n"
        response += "\nIzvor: Google Search API\n\n‚ö†Ô∏è *Ove informacije mogu biti nea≈æurne ili netaƒçne*"
        return response

    def get_response(self, user_input: str) -> str:
        # Sportska pitanja obavezno idu kroz web pretragu
        if any(keyword in user_input.lower() for keyword in self.sports_keywords):
            results = self.search_web(user_input)
            if results:
                # Add disclaimer to make it clear this is from web search
                formatted = self.format_search_results(results)
                return f"üîç **Informacije sa weba (mo≈æda nisu a≈æurne):**\n\n{formatted}\n\n‚ö†Ô∏è *Molim proverite na zvaniƒçnim izvorima za najtaƒçnije informacije*"
            return "Trenutno nemam pristup a≈æurnim informacijama. Molim vas proverite na zvaniƒçnim sportskim sajtovima."

        # Nauƒçeni odgovori (pattern-based)
        learned = self.memory.get_learned_response(user_input)
        if learned:
            # Add disclaimer for learned responses
            return f"{learned}\n\n‚ÑπÔ∏è *Ovo je nauƒçeni odgovor baziran na prethodnim interakcijama*"

        # Direktna memorija po kljuƒçu (ako korisnik ka≈æe "zapamti ...")
        direct_mem = self.memory.retrieve_memory(user_input)
        if direct_mem:
            # Add disclaimer for memory-based responses
            return f"{direct_mem}\n\n‚ÑπÔ∏è *Ovo je zapamƒáena informacija iz prethodnih razgovora*"

        # Generalni odgovor preko DeepSeek (ako je konfigurisan) ili fallback
        response = self.generate_response(user_input)
        
        # Add accuracy disclaimer to AI responses
        if "nisam siguran" not in response.lower() and "nemam" not in response.lower():
            response += "\n\n‚ÑπÔ∏è *Ovo je AI generisan odgovor - molim proverite informacije ako su kritiƒçne*"
        
        return response

    def generate_response(self, user_input: str) -> str:
        # Blokiraj sportska pitanja bez pretrage
        if any(keyword in user_input.lower() for keyword in self.sports_keywords):
            return "Za sportske informacije moram koristiti web pretragu. Poku≈°ajte ponovo."

        # Enhanced system prompt with strict anti-hallucination instructions
        enhanced_system_prompt = self.system_prompt + """
        
STRICT ANTI-HALLUCINATION PROTOCOL:
1. NIKAD NE IZMI≈†LJAJ INFORMACIJE - koristi samo ono ≈°to zna≈° iz pouzdanih izvora
2. Ako nisi 100% siguran u odgovor, reci "Nisam siguran" ili "Ne mogu da potvrdim"
3. Nikad ne daj taƒçne brojeve, datume ili ƒçinjenice bez apsolutne sigurnosti
4. Za sve trenutne informacije koristi web pretragu
5. Ako nema≈° pristup a≈æurnim podacima, reci to jasno
6. Preferiraj oprez i taƒçnost preko brzine odgovora
7. Ne pretpostavljaj - tra≈æi dodatne informacije ako je potrebno
8. Koristi samo verifikovane podatke iz sistemskog konteksta

ODGOVORI U SKLADU SA PROTOKOLOM:
- "Trenutno nemam pristup a≈æurnim informacijama o tome"
- "Nisam siguran u taƒçnost te informacije"
- "Molim vas proverite na zvaniƒçnim izvorima za najtaƒçnije podatke"
- "Ne mogu da potvrdim ove informacije bez web pretrage"
- "Za taƒçne i a≈æurne podatke, preporuƒçujem direktnu proveru"
"""

        payload = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": enhanced_system_prompt},
                {"role": "user", "content": user_input}
            ],
            "temperature": 0.1,  # Very low temperature to reduce creativity
            "max_tokens": 300,
            "top_p": 0.1,  # Very low top_p to focus on most likely responses
            "frequency_penalty": 0.5,  # Penalize frequent phrases to reduce repetition
            "presence_penalty": 0.5  # Penalize new concepts to stay on topic
        }

        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        } if DEEPSEEK_API_KEY else None

        try:
            if headers:
                r = requests.post(DEEPSEEK_API_URL, headers=headers, json=payload, timeout=30)
                if r.ok:
                    data = r.json()
                    content = (
                        data.get('choices', [{}])[0]
                        .get('message', {})
                        .get('content', '')
                    )
                    if content:
                        # Validate response doesn't contain hallucinations
                        validated_content = self.validate_response_for_hallucinations(content, user_input)
                        
                        # uƒçenje iz konverzacije
                        try:
                            self.learn_from_conversation(user_input, validated_content)
                            self.memory.store_conversation(user_input, validated_content)
                        except Exception:
                            pass
                        return validated_content
                # ako API ne odgovori korektno
                return "Trenutno ne mogu da dohvatim odgovor od AI servisa. Molim poku≈°ajte ponovo."
            else:
                # Fallback bez API kljuƒça - be≈æi od izmi≈°ljanja
                fallback_response = "Trenutno nemam pristup AI servisu za generisanje odgovora. Molim poku≈°ajte ponovo kasnije ili koristite web pretragu za taƒçne informacije."
                try:
                    self.learn_from_conversation(user_input, fallback_response)
                    self.memory.store_conversation(user_input, fallback_response)
                except Exception:
                    pass
                return fallback_response
        except Exception as e:
            return f"Trenutno ne mogu da obradim va≈° zahtev zbog tehniƒçke gre≈°ke: {str(e)}"

    def validate_response_for_hallucinations(self, response: str, user_input: str) -> str:
        """
        Validates the response for potential hallucinations and adds disclaimers
        """
        response_lower = response.lower()
        
        # Lista zabranjenih izjava - stvari koje AI NE SME da tvrdi
        forbidden_claims = [
            'sigurno znam', 'definitivno je', '100% taƒçno', 'nema sumnje',
            'potvrƒëeno je', 'zvaniƒçni podaci', 'provereno je', 'garantujem'
        ]
        
        # Lista faktualnih pojmova koji zahtevaju proveru
        factual_triggers = [
            'je', 'su', 'ima', 'bio', 'bila', 'bilo', 'taƒçno', 'rezultat',
            'pobedio', 'izgubio', 'utakmica', '≈°ampion', 'takmiƒçenje', 'statistika',
            'broj', 'podatak', 'istina', 'ƒçinjenica', 'datum', 'godina', 'cena',
            'cene', 'evra', 'dolara', 'cena', 'cene'
        ]
        
        # Provera za zabranjene izjave
        has_forbidden_claims = any(claim in response_lower for claim in forbidden_claims)
        
        # Provera za faktualne tvrdnje
        has_factual_claims = any(keyword in response_lower for keyword in factual_triggers)
        
        # Provera za sportske pojmove
        sports_keywords = ['utakmica', 'rezultat', 'tim', 'igraƒç', 'liga', '≈°ampionat', 'gol', 'asist']
        has_sports_content = any(keyword in response_lower for keyword in sports_keywords)
        
        # Dodaj odgovarajuƒáe disclaimere
        if has_forbidden_claims:
            disclaimer = "\n\nüö® **UPOZORENJE:** Ovo je AI generisan odgovor. Molim proverite sve informacije na zvaniƒçnim izvorima pre nego ≈°to ih koristite."
            if disclaimer not in response:
                response += disclaimer
        
        elif has_factual_claims:
            disclaimer = "\n\n‚ö†Ô∏è **NAPOMENA:** Ove informacije su generisane od strane AI-a. Molim proverite taƒçnost na pouzdanim izvorima."
            if disclaimer not in response:
                response += disclaimer
        
        elif has_sports_content:
            disclaimer = "\n\n‚öΩ **SPORTSKE INFORMACIJE:** Za najtaƒçnije i naja≈æurnije sportske informacije, molim posetite zvaniƒçne sajtove sportskih organizacija."
            if disclaimer not in response:
                response += disclaimer
        else:
            # Op≈°ti disclaimer za sve AI odgovore
            disclaimer = "\n\n‚ÑπÔ∏è **NAPOMENA:** Ovo je AI generisan odgovor. Preporuƒçujem proveru kritiƒçnih informacija na zvaniƒçnim izvorima."
            if disclaimer not in response:
                response += disclaimer
        
        # Dodatna provera za preteranu sigurnost
        if 'sigurno' in response_lower or 'definitivno' in response_lower:
            caution = "\n\nüîç **SAVET:** Za potpuno taƒçne informacije, uvek proverite sa vi≈°e nezavisnih izvora."
            if caution not in response:
                response += caution
        
        return response

    def remember_instruction(self, instruction: str) -> str:
        key = f"instruction_{hash(instruction)}"
        try:
            self.memory.store_memory(key, instruction)
            return "Zapamtio sam va≈°e uputstvo."
        except Exception:
            return "Nisam uspeo da zapamtim uputstvo."
